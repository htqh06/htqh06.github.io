<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Data base</title>
    <link href="/2025/03/09/Data-base/"/>
    <url>/2025/03/09/Data-base/</url>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>DB和DBMS:一个数据库和一个软件（管理多个数据库）  </p><p>数据模型（Data Model）：  </p><ul><li>ER图:数据关系描述的更清晰</li><li>关系模型（Relation Model）：可读性更强</li></ul><p>A 3 levels data description:<br>External Schema（用户层）-&gt;Conceptual schema（逻辑结构，常用ER图）-&gt;Physical schema（DBMS管理，内部层，物理存储）</p><p>DBMS<br>DDL：数据定义语言 定义数据库结构<br>DML：数据库操作语言，增删改查：SELECT, INSERT, UPDATE DELETE  </p><h2 id="Relational-Model-and-Relational-Algebra"><a href="#Relational-Model-and-Relational-Algebra" class="headerlink" title="Relational Model and Relational Algebra"></a>Relational Model and Relational Algebra</h2><ol><li>笛卡尔积：AXB<br><code>SQL: SELECT * FROM table1，table2</code></li><li>关系：整个表就是一个关系：属性attribute（列），元组tuple（行），域（Domain）表示某个属性的取值范围，主键Primary Key：可以唯一标识一个元组的字段， 外键：在一个表中引用另一个表的主键，用来建立表之间的关系</li></ol><p>关系代数：</p><ol><li>并（union）</li><li>交（intersection）</li><li>差（Difference）</li><li>笛卡尔积</li><li>选择：<br>$$<br>\sigma_{model &#x3D; ‘db’ \ and \ age \ &gt;15} (Students)<br>$$</li><li>投影：<br>$$<br>\pi_{addreee}(Student)<br>$$</li><li>join:按条件合并两表的行（实际是选择 + 笛卡尔积的组合⨝<br><code>SELECT * FROM Students</code><br><code>JOIN Enrollments ON Students.id = Enrollments.student_id</code></li><li>Division除：</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>YAGO论文学习</title>
    <link href="/2025/03/06/YAGO%E8%AE%BA%E6%96%87%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/03/06/YAGO%E8%AE%BA%E6%96%87%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Knowledge Base(Knwoledge Graph)是一个有向标签多重图（两个节点之间允许有多条边）</p><p>相比与WikiData，YAGO 4 KB结合了WiKiData的 instance和Schema.org的分类  </p><p>方便进行推理(Resoning)  </p><p>WiKidata采用Class,有很多用户自己定义的复杂类类别。<br>YAGO采用多个属性(Properity)的组合，方便推理，但是如果有些非常规类别名，则很难搜索。  </p><p>在这篇论文中，作者尝试结合WiKidata和YAGO的优点，即YAGO采用Schema.org,拥有比较清晰的上层分类(Upper taxonomy)结构，而Wikidata的下层分类(lower taxonomy)更具细节.  </p><h2 id="Designing-YAGO"><a href="#Designing-YAGO" class="headerlink" title="Designing YAGO"></a>Designing YAGO</h2><ol><li>prefer properties over class membership</li><li>Choose the property with fewer objects.</li><li>The upper taxonomy exists to define formal properties that will be populated</li><li>The lower taxonomy exists to convey human-intelligible information about its instances in a non-redundant form.</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Network Program学习笔记</title>
    <link href="/2025/03/03/Network-Program%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/03/03/Network-Program%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Network-Programing-学习笔记"><a href="#Network-Programing-学习笔记" class="headerlink" title="Network Programing 学习笔记"></a>Network Programing 学习笔记</h1><h2 id="考试形式"><a href="#考试形式" class="headerlink" title="考试形式"></a>考试形式</h2><p>实验+考试，考试主要是理论</p><h2 id="TCP协议的Socket的函数调用流程"><a href="#TCP协议的Socket的函数调用流程" class="headerlink" title="TCP协议的Socket的函数调用流程"></a>TCP协议的Socket的函数调用流程</h2><p><img src="/pic/1.png" alt="img"><br>函数展示, 服务端 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netinet/in.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> server_fd, client_fd;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">address</span>;</span><br>    <span class="hljs-type">int</span> addrlen = <span class="hljs-keyword">sizeof</span>(address);<br><br>    <span class="hljs-comment">// 1. 创建套接字</span><br>    server_fd = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (server_fd == <span class="hljs-number">-1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;socket failed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">// 2. 绑定端口</span><br>    address.sin_family = AF_INET;<br>    address.sin_addr.s_addr = INADDR_ANY;<br>    address.sin_port = htons(<span class="hljs-number">8080</span>);<br>    <span class="hljs-keyword">if</span> (bind(server_fd, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;address, <span class="hljs-keyword">sizeof</span>(address)) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;bind failed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">// 3. 监听连接</span><br>    <span class="hljs-keyword">if</span> (listen(server_fd, <span class="hljs-number">5</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;listen failed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Server listening on port 8080...\n&quot;</span>);<br><br>    <span class="hljs-comment">// 4. 接受连接并处理</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        client_fd = accept(server_fd, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;address, (<span class="hljs-type">socklen_t</span>*)&amp;addrlen);<br>        <span class="hljs-keyword">if</span> (client_fd &lt; <span class="hljs-number">0</span>) &#123;<br>            perror(<span class="hljs-string">&quot;accept failed&quot;</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 5. 数据通信</span><br>        <span class="hljs-type">char</span> buffer[<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>        read(client_fd, buffer, <span class="hljs-keyword">sizeof</span>(buffer));<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Client: %s\n&quot;</span>, buffer);<br><br>        <span class="hljs-type">char</span> *response = <span class="hljs-string">&quot;Message received!&quot;</span>;<br>        send(client_fd, response, <span class="hljs-built_in">strlen</span>(response), <span class="hljs-number">0</span>);<br><br>        close(client_fd);<br>    &#125;<br><br>    close(server_fd);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端   </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netinet/in.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> client_fd;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">server_addr</span>;</span><br><br>    <span class="hljs-comment">// 1. 创建套接字</span><br>    client_fd = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (client_fd == <span class="hljs-number">-1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;socket failed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">// 2. 连接服务器</span><br>    server_addr.sin_family = AF_INET;<br>    server_addr.sin_port = htons(<span class="hljs-number">8080</span>);<br>    inet_pton(AF_INET, <span class="hljs-string">&quot;127.0.0.1&quot;</span>, &amp;server_addr.sin_addr);<br><br>    <span class="hljs-keyword">if</span> (connect(client_fd, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;server_addr, <span class="hljs-keyword">sizeof</span>(server_addr)) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;connect failed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">// 3. 发送和接收数据</span><br>    <span class="hljs-type">char</span> *message = <span class="hljs-string">&quot;Hello, Server!&quot;</span>;<br>    send(client_fd, message, <span class="hljs-built_in">strlen</span>(message), <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Message sent: %s\n&quot;</span>, message);<br><br>    <span class="hljs-type">char</span> buffer[<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    read(client_fd, buffer, <span class="hljs-keyword">sizeof</span>(buffer));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Server response: %s\n&quot;</span>, buffer);<br><br>    close(client_fd);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="UDP协议的socket函数创建流程"><a href="#UDP协议的socket函数创建流程" class="headerlink" title="UDP协议的socket函数创建流程"></a>UDP协议的socket函数创建流程</h2><p><img src="/pic/UDP-structure.png" alt="img"><br>相比与TCP协议，在服务端中UDP省去了accept(), 客户端中省去了Connect()这两个建立连接的过程。是一个无连接协议</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netinet/in.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> sockfd;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">server_addr</span>, <span class="hljs-title">client_addr</span>;</span><br>    <span class="hljs-type">socklen_t</span> client_len = <span class="hljs-keyword">sizeof</span>(client_addr);<br>    <span class="hljs-type">char</span> buffer[<span class="hljs-number">1024</span>];<br><br>    <span class="hljs-comment">// 1. 创建UDP套接字</span><br>    sockfd = socket(AF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (sockfd == <span class="hljs-number">-1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;socket creation failed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">// 2. 绑定地址和端口</span><br>    server_addr.sin_family = AF_INET;<br>    server_addr.sin_addr.s_addr = INADDR_ANY;<br>    server_addr.sin_port = htons(<span class="hljs-number">8080</span>);<br>    <span class="hljs-keyword">if</span> (bind(sockfd, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;server_addr, <span class="hljs-keyword">sizeof</span>(server_addr)) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;bind failed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;UDP Server listening on port 8080...\n&quot;</span>);<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 3. 接收数据（需保存客户端地址）</span><br>        <span class="hljs-type">ssize_t</span> bytes_received = recvfrom(sockfd, buffer, <span class="hljs-keyword">sizeof</span>(buffer), <span class="hljs-number">0</span>, <br>                                        (<span class="hljs-keyword">struct</span> sockaddr*)&amp;client_addr, &amp;client_len);<br>        <span class="hljs-keyword">if</span> (bytes_received &lt; <span class="hljs-number">0</span>) &#123;<br>            perror(<span class="hljs-string">&quot;recvfrom failed&quot;</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        buffer[bytes_received] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Received from client: %s\n&quot;</span>, buffer);<br><br>        <span class="hljs-comment">// 4. 发送响应</span><br>        <span class="hljs-type">char</span> *response = <span class="hljs-string">&quot;Hello from UDP server&quot;</span>;<br>        sendto(sockfd, response, <span class="hljs-built_in">strlen</span>(response), <span class="hljs-number">0</span>, <br>             (<span class="hljs-keyword">struct</span> sockaddr*)&amp;client_addr, client_len);<br>    &#125;<br><br>    close(sockfd);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netinet/in.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> sockfd;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">server_addr</span>;</span><br>    <span class="hljs-type">char</span> buffer[<span class="hljs-number">1024</span>];<br><br>    <span class="hljs-comment">// 1. 创建UDP套接字</span><br>    sockfd = socket(AF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (sockfd == <span class="hljs-number">-1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;socket creation failed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">// 2. 设置服务器地址</span><br>    server_addr.sin_family = AF_INET;<br>    server_addr.sin_port = htons(<span class="hljs-number">8080</span>);<br>    inet_pton(AF_INET, <span class="hljs-string">&quot;127.0.0.1&quot;</span>, &amp;server_addr.sin_addr);<br><br>    <span class="hljs-comment">// 3. 发送数据（无需连接）</span><br>    <span class="hljs-type">char</span> *message = <span class="hljs-string">&quot;Hello from UDP client&quot;</span>;<br>    sendto(sockfd, message, <span class="hljs-built_in">strlen</span>(message), <span class="hljs-number">0</span>, <br>         (<span class="hljs-keyword">struct</span> sockaddr*)&amp;server_addr, <span class="hljs-keyword">sizeof</span>(server_addr));<br><br>    <span class="hljs-comment">// 4. 接收响应</span><br>    <span class="hljs-type">ssize_t</span> bytes_received = recvfrom(sockfd, buffer, <span class="hljs-keyword">sizeof</span>(buffer), <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (bytes_received &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;recvfrom failed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br>    buffer[bytes_received] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Server response: %s\n&quot;</span>, buffer);<br><br>    close(sockfd);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CS106L Learning</title>
    <link href="/2025/02/20/CS106L-Learning/"/>
    <url>/2025/02/20/CS106L-Learning/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a><strong>写在前面</strong></h2><p>说实话，虽然我本科是计算机科班出身，但对C++的认识仍然只停留在cin和cout。</p><p>这次，由于国外的研究生比较闲，可以借这次机会好好学习一下c++<p>Telecom sudparis的课真是大粪，基本都是我本科学过的，而且他课上讲的真的不精，很多东西都是浅尝辄止，很难想象目前的欧洲教育体系下培养出来的学生真的能找到工作吗？]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
