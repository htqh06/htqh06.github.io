<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>DDBS</title>
    <link href="/2025/05/13/DDBS/"/>
    <url>/2025/05/13/DDBS/</url>
    
    <content type="html"><![CDATA[<h2 id="distributed-database-system">Distributed Database system</h2><p>Distributed Database system Definition: collection of autonomousprocessing elements that are interconnected by a computer network.<br />DDBS = DDB + DDBMS<br />DDBS有两个设计策略：分别是分片(fragmentaion)和复制(replication)<br />### Fragmentation分片：将一个大表分为数个小表，数个表分给运行在不同主机上的DDB<br />水平分片（Horizontalfragmentation）:按照元组（tuple）去分，也就是按照行去分片<br />垂直分片(Verticalfragmentation):按照垂直去分片，也就是按照属性去分<br />混合分片<br />分片的几个要求：完整性（completeness）分片不会导致数据缺失，Reconstruction，能合成回原表以及Disjointness每个数据在分片中只能出现一次</p><h3 id="replication-and-allocation">Replication and allocation</h3><p>repliaction也分为三个：<br />1. 完全复制(fully replication):each fragment at each site 2.部分复制(partically replication): each fragment at some of the sites 3.不复制(也就是partitioned DB)：each fragment resides at only one site</p><h3 id="transparency">Transparency</h3><p>1.Network Transparency：<br />Loaction Transparency: User dont need to know the loaction for theDDB<br />Naming Transparency: : A unique name is provided for each object in thedatabase.<br />2.Fragmentationtransparency：确保用户既无须知道也不会参与数据的碎片化过程，用户无需负责针对碎片制定查询处理策略，也无需撰写针对碎片的查询，而且可以<br />水平分片<br />垂直分片</p><h2 id="distributed-concurrency-control">Distributed ConcurrencyControl</h2><h3 id="transaction-事务">Transaction 事务</h3><p>Transaction是数据库中的一组逻辑操作的集合，拥有ACID四个性质<br />Atomicity，Consistency，Isolation，Durability。<br />事务的可能状态：Active，Partically commit，commit，Failed，Aborted激活，部分提交，提交，失败和放弃。<br />事务提交的两步协议：如果一个候选人投票放弃，则放弃提交，如果全部候选人都投票提交了，事务才能被提交。<br />### 并发性Concurrency 并发性的三个冲突： 1. 写写冲突：数据覆盖 2.读写冲突：脏读：A修改了数据但未提交，B读到了A写的数据，但A回滚 3.读—读与写—写之外的异常（幻读，或者不可重复读）</p><h3 id="冲突可串行化serializability">冲突可串行化(Serializability)</h3><p>可以通过前驱图判断，如果在一个序列化操作中，有读写冲突，写读冲突或者写写冲突，我们在事务1和2之间加一条边，如果是一个无环图，则可串行化Serializability。<br />注意判断调度是否可以Serialize，以及并发调度转串行化<br />### 2PL 将事务的阶段分为生长期和收缩期 生长期(GrowingPhase):事务可以不断获取锁但不能释放锁。<br />收缩期(Shrinking Phase)：事务只能释放锁但不能获取锁。<br />Strict 2PL：直到事务结束都持有锁<br />Centralized 2PL：所有锁由一个中心服务器管理<br />分布式 2PL：每个站点本地+协调</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>javaguide</title>
    <link href="/2025/04/10/javaguide/"/>
    <url>/2025/04/10/javaguide/</url>
    
    <content type="html"><![CDATA[<h2 id="java基础">Java基础</h2><h3 id="值传递">值传递</h3><p>不像C++有引用传递，java中全部都是值传递，函数拿到的全是原变量的副本### java序列化将数据结构或对象转换成可以存储或传输的形式，通常是二进制字节流，也可以是JSON, XML 等文本格式<br />发生在OSI七层模型中的表示层，对应于TCP四层协议的应用层<br />OSI七层：应用层，表示层，会话层，传输层，网络层，数据链路层，物理层<br />### 代理模式 我们使用代理对象来代替对真实对象(realobject)的访问，这样就可以在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能。代理模式的主要作用是扩展目标对象的功能，比如说在目标对象的某个方法执行前后你可以增加一些自定义的操作。<br />### BigDecimal BigDecimal 可以实现对小数的运算，不会造成精度丢失</p><h2 id="集合container">集合Container</h2><p>Java 集合，也叫作容器，主要是由两大接口派生而来：一个是Collection接口，主要用于存放单一元素；另一个是 Map接口，主要用于存放键值对。对于Collection接口，下面又有三个主要的子接口：List、Set 、 Queue</p><p>集合中的collection主要用来存储数值，而MAP用于存储键值对<br />所以，我们在需要存储数值时，选用collection，而需要存储键值对时，我们选用Map<br />在选取collection时：<br />如果我们需要需要保证元素唯一时选择实现 Set 接口的集合比如 TreeSet 或HashSet，不需要就选择现 List 接口的比如 ArrayList 或 LinkedList。<br />### List List分为ArrayList和Linklist<br />ArrayList和LinkedList的实现底层逻辑不同，ArrayList的实现是一个数组，而LinkedList的实现是一个双向链表<br />对于插入：头部插入：由于需要将所有元素都依次向后移动一个位置，因此时间复杂度是O(n)。<br />尾部插入：当 ArrayList的容量未达到极限时，往列表末尾插入元素的时间复杂度是O(1)，因为它只需要在数组末尾添加一个元素即可；当容量已达到极限并且需要扩容时，则需要执行一次O(n) 的操作将原数组复制到新的更大的数组中，然后再执行 O(1)的操作添加元素。<br />指定位置插入：需要将目标位置之后的所有元素都向后移动一个位置，然后再把新元素放入指定位置。这个过程需要移动平均n/2 个元素，因此时间复杂度为 O(n)。<br />对于删除：<br />头部删除：由于需要将所有元素依次向前移动一个位置，因此时间复杂度是O(n)。<br />尾部删除：当删除的元素位于列表末尾时，时间复杂度为 O(1)。<br />指定位置删除：需要将目标元素之后的所有元素向前移动一个位置以填补被删除的空白位置，因此需要移动平均n/2 个元素，时间复杂度为 O(n)。<br />#### ArrayList代码分析 minCapacity表示你需要的最小容量，也就是在即将添加元素之后，数组至少需要达到的长度。<br />elementData.length则是当前数组的实际容量（即数组能够容纳多少元素）。<br /><code>ensureCapacity(int minCapacity)</code>：通过判断当前是否是默认空数组，设置一个<code>minExpand</code>，再调用<code>ensureExplicitCapacity</code>判断是否需要扩容。<br /><code>ensureExplicitCapacity(int minCapacity)</code>：判断<code>minCapacity</code>是否超过当前数组长度，如果超过则调用<code>grow(minCapacity)</code><br /><code>grow(minCapacity)</code>: new capacity = old capacity+(capacity&gt;&gt;1),即，容量变为原来的1.5倍.</p><p>add 方法（包括<code>add(E e)</code> 和<code>add(int index, E element)</code>）：单一添加时：先使用`<code>确保有足够的容量，然后把元素放在</code>elementData[size]<code>，并递增</code>size`。</p><p>指定位置插入时：先调用 rangeCheckForAdd 进行索引合法检查，然后通过System.arraycopy 将元素从指定位置开始后移一个位置，再插入新元素。</p><h3 id="fail-fast和fail-safe">fail-fast和fail-safe</h3><p>两种不同的机制，fail-fast讲究的是可能发生的异常进行提前表明故障并停止运行。例如，在集合中，维护一个modcount记录修改操作的次数，如果遇到修改次数不符合预期，比如说线程1预期修改次数是100，而在线程1运行过程中遇到了线程2的修改，则会变成101，报错跳出。<br />fail-safe也就是安全失败的含义，它旨在即使面对意外情况也能恢复并继续运行。可以通过维护一份快照，来实现对数据的备份，以此在面对意外情况的时候能恢复运行。</p><h3 id="comparator和comparable">comparator和comparable</h3><p><code>arrayList.sort(Comparator.reverseOrder());</code>在java8之后，可以直接在方法内部添加比较器或者lambda表达式<br />或者可以先自定义比较器。 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 按年龄升序</span><br>Comparator&lt;Person&gt; byAge = Comparator.comparingInt(Person::getAge);<br><br><span class="hljs-comment">// 按姓名字母序（忽略大小写）</span><br>Comparator&lt;Person&gt; byNameIgnoreCase =<br>    Comparator.comparing(p -&gt; p.getName().toLowerCase());<br><br></code></pre></td></tr></table></figure> ### sethashset：存储不重复元素，内部基于一个hashmap实现，hashset存储的是元素值，(实际上是hashmap中对应去了同一个值，hashset存的是键)hashmap&lt;a,b&gt;存的是键值对。<br />LinkedHashSet 的底层数据结构是链表和哈希表，元素的插入和取出顺序满足FIFO。<br />与 HashSet 不同，LinkedHashSet 的底层 LinkedHashMap 会为每个 Entry节点额外维护指向前后节点的链表指针，从而记录插入顺序。</p><p>queue:FIFO, 只能poll队头并从队尾插入<br />deque：加入了对队列的扩展，增加了从队头插入和队尾删除的功能<br />BlockingQueue （阻塞队列）是一个接口，继承自Queue。BlockingQueue阻塞的原因是其支持当队列没有元素时一直阻塞，直到有元素；还支持如果队列已满，一直等到队列可以放入新元素时再放入。可以在生产者消费者模型中使用PriorityQueue可以用来构建堆，实现的底层是一个二叉树，默认是小顶堆，底层使用可变长的数组来存储数据,每插入一个节点的时间复杂度是O(logn).<code>PriorityQueue&lt;Integer&gt; maxheap  = new PriorityQueue&lt;&gt;(Comparator.reverseOrder())</code>可以用comparator这个比较器让他从小顶堆变成大顶堆。</p><h2 id="map">map</h2><p>hashmap和hashtable：hashmap支持null键和值，而hashtable不支持。hashmap的扩容以初始大小16，后续每次扩容一倍<br />hashmap的遍历：<br /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap&lt;Integer, Integer&gt; hashmap  = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-keyword">for</span>(Integer i : hashmap.keySet())&#123;<br>    <span class="hljs-comment">//遍历键</span><br>&#125;<br><span class="hljs-keyword">for</span>(Map.Entry&lt;Integer, String&gt; entry : map.entrySet())&#123;<br>    <span class="hljs-comment">//遍历条目entry</span><br>&#125;<br></code></pre></td></tr></table></figure> ### 哈希表如何检查和处理重复元素检查重复元素：把对象加入hashset时，会先计算对象的hashcode来判断对线加入的位置，并与其他加入的对象的hashcode值，如果没有相符的hashcode。如果有hashcode值相同的对象，调用equals()来检查是否真的相同，如果相同，就不让加入操作成功<br />拉链法：将链表和数组相结合。也就是说创建一个链表数组，数组中每一格就是一个链表。若遇到哈希冲突，则将冲突的值加到链表中即可。<br />jdk1.8后之后，如果链表长度超过64，则转换为红黑树。查询效率为O(logn),但实际上，遇到哈希冲突的概率很小。<br />concurrenthashmap：对哈希表的segment数组进行加锁，分段存储，是其线程安全，</p><h2 id="并发编程">并发编程</h2><h3 id="线程与进程">线程与进程</h3><p>进程是系统运行程序的基本单位，而线程是系统调度的最小单位，每个进程之间相互隔离而线程拥有公共的地址空间（指的是一个程序或者说一个进程，可以访问的全部内存地址的集合），在线程中，线程的程序计数器，虚拟机栈和本地方法栈是独立的，而堆是共享的。虚拟机栈用于存储存储局部变量表、操作数栈、常量池引用等信息，而公共的堆和方法去用于村新创建的对象，方法区主要用于存放已被加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。<br />线程上下文切换：保存线程计数器和上的下文，等待下一次线程获得cpu事件来恢复当前状态死锁，线程a和b在互相等待对方持有的资源被释放，造成一直等待。<br />预防死锁的方法：破坏死锁的条件，（非抢占，互斥，占有并等待，循环等待）<br />检测死锁的算法：资源分配图<br />避免死锁的算法：银行家算法<br />悲观锁：假设是最坏的情况，共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程。例如synchronized和reentrantlock<br />乐观锁：认为共享资源每次被访问的时候不会出现问题，因此不加锁也不等待，通过版本号或者cas算法检测是否被其他线程修改，如果修改则回滚<br />Compare And Swap（比较与交换）：CAS的思想很简单，就是用一个预期值和要更新的变量值进行比较，两值相等才会进行更新。CAS有三个值，V要更新的变量值，E预期值和N拟写入的新值，如果V等于E，证明没有被其他线程修改，则才进行更新。<br />synchronic关键字比volatile开销要高，但是volatile关键字只能保证可见性不能保证原子性。<br />ReentrantLock实现的是一个接口，而非关键字。</p><h3 id="线程池">线程池</h3><p>线程池就是管理一系列线程的资源池。当有任务要处理时，直接从线程池中获取线程来处理，处理完之后线程并不会立即被销毁，而是等待下一个任务。<br />线程池常见的三个参数：corePoolSize：任务队列未达到队列容量时，最多启动的线程数目<br />maximumPoolSize：任务队列中存放的任务达到队列容量的时候，可以运行的线程数目变位最大线程数。<br />workQueue：新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。<br />keepAliveTime：线程大于corePoolSize时，非核心线程的存活时间运行流程：如果当前运行的线程数小于核心线程数，则创建一个线程来处理任务，如果大于，则放入任务队列，如果无法放入任务队列，任务队列已满，创建新线程来处理。如果当前运行的线程数已经等同于最大线程数了，新建线程将会使当前运行的线程超出最大线程数，那么当前任务会被拒绝</p><p>Future类：调用CompletableFuture的时候可以实现任务T3等待T1，T2在完成后再运行</p><h3 id="threadlocal">Threadlocal</h3><p>用处：Threadlocal用于存储线程自己的变量内容，是独立于其他线程的，让每个线程都有自己的专属本地变量。<br />Threadlocal的方法含在Thread类中，当调用Threadlocal的方法时，创建一个ThreadlocalMap，他存储键值对，ThreadLocal为key ，Object 对象为 value 的键值对<br />Threadlocal会导致内存泄露(回收时部分内存无法被及时释放)。因为在Threadlocalmap中Threadlocal作为的key是弱引用，而value是强引用，会导致当key被回收之后而value仍然存在。即null的key对某个value，导致内存泄露。</p><h2 id="jvm内存管理">JVM内存管理</h2><p>在线程中，线程分为：公用的栈和方法区，以及私有的程序计数器，虚拟机栈和本地方法栈<br />在jvm中，程序计数器用于存储线程运行的状态，以便上下文切换的时候能及时还原线程的运行状态。虚拟机栈用于存储线程的除了本地方法外的方法，每个方法的调用都会通过栈帧进行。本地方法栈存储的是java中的native方法。<br />jvm中线程的堆分为三个部分，新生代，老生代，记录对象年龄的为4位二进制数，所以最大为15岁。堆，此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。<br />方法区（永生代，元空间）：类信息、字段信息、方法信息、常量、静态变量、即时编译器编译后的代码缓存等数据。同时，方法区中还会存在字符串常量池，和运行时常量池。<br />运行时常量池：字面量：如 int, float, String等常量，符号引用或者动态常量。<br />字符串常量池用来存储字符串变量String，在java中如果创建一个字符串hello，则存入字符串常量池，如果用new创建，则单独分配内存### 对象的创建 1.类类型检查<br />2.分配内存：<br />(1)指针碰撞：设置一个指针，在指针左侧是被分配的空间，指针右侧是未被分配的空间，要分配新的内存空间，只需要把指针向右侧移动就行了<br />(2)空闲列表：虚拟机维护一个列表，记录哪里的块是空闲的。<br />3.初始化零值<br />4.创建对象头<br />5.调用init方法</p><p>对象在jvm中的存储：对象头+实例数据+对齐填充。 ## java中的垃圾清理堆分为新生代，老生代和永生代。新创建的对象一般位于新生代的elden区。如果对象过大，或者对象活过很多次垃圾清理，或者新生代的内存空间使用完毕，则会从新生代进入老生代。<br />### 死亡对象的判断堆垃圾回收的第一步就是死亡对象的判断，引用计数法：给对象添加一个引用计数器，如果对象被引用则加1，否则-1，当对象的引用计数器为0的时候，则其没有被任何其他对象引用，为死亡对象。但这个方法不好实现。所以采用另一种方法，即可达性分析的方法。通过一系列的称为“GC Roots”的对象作为起点，从这些节点开始向下搜索，节点所走过的路径称为引用链，当一个对象到GC Roots没有任何引用链相连的话，则证明此对象是不可用的，需要被回收。<br />强引用，软引用，弱引用，虚引用。强引用不能被回收，而软引用会在内存空间不足的情况下回收，弱引用存活周期最短，在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。<br />### 垃圾清除算法：标记清除算法：把要清除的垃圾全部标记，然后定点清除这些垃圾，问题是会产生很多的内存碎片，而且清除效率也较低。<br />复制算法：将内存分为两块，每次使用一半，使用完毕后把仍然存活的对象复制到对面的一半内存中去，并直接清除这一块的所有内存内容。<br />标记整理算法：把存活的内存内容向内存的一端移动，以达到是内存更加连续的目的，然后清理掉剩下的内容。分代收集算法：根据新生代和老生代的内存清理速度不同，新生代可以采用速度较快的复制算法，这样只用每次复制少数可用的数据就行了，而老生代采用标记整理算法更好，因为老生代的内存清理速度更慢。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>French Learning</title>
    <link href="/2025/03/27/French-Learning/"/>
    <url>/2025/03/27/French-Learning/</url>
    
    <content type="html"><![CDATA[<h2 id="imparfait-未完成过去时">imparfait 未完成过去时</h2><ol type="1"><li><p>描述背景 当叙述过去的故事时，imparfait常用于描写环境、天气、心情或人物的背景。例如： “Il faisaitbeau.”（天气很好。）</p></li><li><p>进行中的动作用来表达过去某个时间段内正在进行的动作，而不是一个明确开始或结束的动作。例如：“Je lisais quand tu as téléphoné.”（你打电话时我正在看书。）</p></li><li><p>习惯性或反复动作 描述过去经常发生或习惯性的行为。例如： Chaqueété, nous allions à la plage.（每年夏天，我们都会去海滩。）</p></li><li><p>描述状态 用于表达过去人物的情感或身体状态。例如：<br />“Il était très fatigué.”（他当时非常疲惫。）</p></li></ol><h3 id="变位语法">变位语法</h3><ol type="1"><li>取动词的“nous”形式（复数第一人称）的词干（去掉 -ons 结尾）</li><li>加上以下人称专用的未完成过去时词尾： je -ais<br />tu -ais<br />il/elle/on -ait<br />nous -ions<br />vous -iez<br />ils/elles -aient<br />举例：<br />Parle: Nous的变位：parlons-&gt;parl je: parlais</li></ol><h2 id="复合过去时">复合过去时</h2><p>复合过去时由 助动词（avoir 或 être） + 过去分词（participe passé）构成。<br />主要用来表示已经完成的动作或事件<br />大部分使用avoir作为助动词<br />少部分表示位置或状态变化的动词用etre，如aller, venir, entrer, sortir,partir, arriver, naître, mourir<br />过去分词变化: -er -&gt; 去掉er加é<br />-ir -&gt; 去掉ir加i<br />-re -&gt; 去掉re加u<br />不规则变化：<br />avoir -&gt; eu étre -&gt; été faire -&gt; fait</p><h2 id="动词变位-一般现在时">动词变位 一般现在时</h2><p>动词在一般现在时的变位分为三组<br />### 第一组 -er parle, manger, aller<br />je parle/mange<br />tu parles/ manges<br />il/elle parle/mange<br />Nous parlons/mangeons<br />Vous parlez/mangez<br />ils/elles parlent/mangent<br />也就是说<br />je - er变e tu - er变es il/elle - er变e Nous - er变ons Vous - er变ezIls/Elles - er变ent ### 第二组 -irfinir（完成）、choisir（选择）、réussir(成功)<br />je - finis/ choisis/ressis<br />tu - finis/choisis/ressis<br />il/elle finit/choisit/ressit Nous - finissons/choisissons/ressissonsVous - finissez/choissez/ressissez ills/elles -finissent/choissent/ressissent</p><h3 id="第三组不规则动词">第三组，不规则动词</h3><p>etre:<br />suis, es, est, sommes, etes, sont<br />avoir:<br />ai, as, a, avons, avez, ont<br />aller:<br />vais, vai, va, allons, allez, vont<br />fait:<br />fais, fais, fait, faisons,faites, font</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Distribute_Database</title>
    <link href="/2025/03/21/Distribute-Database/"/>
    <url>/2025/03/21/Distribute-Database/</url>
    
    <content type="html"><![CDATA[<h2 id="第一节ppt">第一节PPT</h2><h2 id="nosql-database">NoSql Database</h2><p>CAP- Conisitency, Avalablity， Torlerance to network Partitions<br />三个标准很难同时满足，传统的Relational database只能满足c和a<br />很多distribued database会去满足A和P</p><p>batch access:将多条数据请求或操作合并在一个批次中一次性执行。例如，在数据库中，可以通过批量插入或更新来减少与数据库的交互次数，从而提高整体性能。<br />比如说可以设置当有100条插入操作之后，再去统一执行操作，</p><p>1.Graph Database<br />类似于E-R图，用节点代表数据实体，用边表示数据实体之间的关系。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Data base</title>
    <link href="/2025/03/09/Data-base/"/>
    <url>/2025/03/09/Data-base/</url>
    
    <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2><p>DB和DBMS:一个数据库和一个软件（管理多个数据库）</p><p>数据模型（Data Model）：<br />- ER图:数据关系描述的更清晰 - 关系模型（Relation Model）：可读性更强</p><p>A 3 levels data description:<br />External Schema（用户层）-&gt;Conceptualschema（逻辑结构，常用ER图）-&gt;Physicalschema（DBMS管理，内部层，物理存储）</p><p>DBMS<br />DDL：数据定义语言 定义数据库结构<br />DML：数据库操作语言，增删改查：SELECT, INSERT, UPDATE DELETE</p><h2 id="relational-model-and-relational-algebra">Relational Model andRelational Algebra</h2><ol type="1"><li>笛卡尔积：AXB<br /><code>SQL: SELECT * FROM table1，table2</code></li><li>关系：整个表就是一个关系：属性attribute（列），元组tuple（行），域（Domain）表示某个属性的取值范围，主键PrimaryKey：可以唯一标识一个元组的字段，外键：在一个表中引用另一个表的主键，用来建立表之间的关系</li></ol><p>关系代数： 1. 并（union） 2. 交（intersection） 3. 差（Difference）4. 笛卡尔积 5. 选择： <span class="math display">\[   \sigma_{model = &#39;db&#39; \ and \ age \ &gt;15} (Students)   \]</span> 6. 投影： <span class="math display">\[   \pi_{addreee}(Student)   \]</span> 7. join:按条件合并两表的行（实际是选择 +笛卡尔积的组合⨝<br /><code>SELECT * FROM Students</code><code>JOIN Enrollments ON Students.id = Enrollments.student_id</code> 8.Division除：</p><h2 id="sql语句">sql语句</h2><p>如果想要表示或者怎么办：使用union语句将两个select联合在一起<br />如：Give the id of movies released before 1930 or having actor’s id 12in their casting.<br /><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c.movieid<br><span class="hljs-keyword">from</span> castings c<br><span class="hljs-keyword">where</span> c.actorid <span class="hljs-operator">=</span> <span class="hljs-number">12</span> <br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">select</span> m.id<br><span class="hljs-keyword">from</span> movies m<br><span class="hljs-keyword">where</span> m.year <span class="hljs-operator">&lt;</span> <span class="hljs-number">1930</span><br></code></pre></td></tr></table></figure> 字符串匹配 用like ‘%abc%’,即 字符串中含有abc的<br />在某个中in(), 不在某个中not in()</p><p>用来找两个不同的演员，自连接： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> m.id, m.title <br><span class="hljs-keyword">FROM</span> movies m, castings c1, castings c2 <br><span class="hljs-keyword">WHERE</span> m.id<span class="hljs-operator">=</span>c1.movieid <span class="hljs-keyword">AND</span> m.id<span class="hljs-operator">=</span>c2.movieid <br><span class="hljs-keyword">AND</span> c1.actorid<span class="hljs-operator">&lt;&gt;</span>c2.actorid <br><span class="hljs-keyword">AND</span> m.yr<span class="hljs-operator">=</span><span class="hljs-number">2000</span> <br></code></pre></td></tr></table></figure> 在代码中<code>c1.actorid&lt;&gt;c2.actorid</code>引入了两个表，表示c1的id不等于c2的id，即有两个即以上不同的演员</p><p>max：max返回的是最大值，例如max(salary)返回的就是最大薪水的值，所以，如果想要用找拥有最大薪水员工的信息，可以用子查询如： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> employee<br><span class="hljs-keyword">where</span> salary <span class="hljs-operator">=</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(salary)<br>                  <span class="hljs-keyword">from</span> employee)<br></code></pre></td></tr></table></figure> group by:搭配count使用，在 GROUP BY中，一组就是一行，每组只投影一次，count可以计数groupby中每个组的行数<br />having：HAVING 是用来对 GROUP BY 分组后的结果 进行筛选的，而 HAVINGCOUNT(…) 就是：筛选出那些组内“行数”符合条件的分组<br />学会使用子查询来满足条件<br />如果要找同一个表中不同的实体拥有相同的属性，可以先取这个表做一个自连接，如r1.n&lt;&gt;r2.n,然后再筛选想要的属性 如 List of the hotels with theiraddress and category, having at least 2 of rooms with the same price.<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> h.address, h.cat<br><span class="hljs-keyword">from</span> hotel h, room r1, room r2<br><span class="hljs-keyword">where</span> r1.nroom <span class="hljs-operator">&lt;&gt;</span> r2.nroom<br><span class="hljs-keyword">and</span> r1.price <span class="hljs-operator">=</span> r2.price<br><span class="hljs-keyword">and</span> h.hotel <span class="hljs-operator">=</span> r1.hotel<br></code></pre></td></tr></table></figure> ### 关系视图View（视图）是基于一个或多个表构建的虚拟表，它本身不存储数据，只是一个查询的结果集。用户可以像访问普通表一样访问视图。<br />你有一个大表 employees，你创建一个视图只看“财务部员工”： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> finance_employees <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">Select</span> e.name, e.id<br><span class="hljs-keyword">from</span> employee e<br><span class="hljs-keyword">where</span> e.type <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;money&#x27;</span><br></code></pre></td></tr></table></figure>你以后可以用： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> finace_employees<br>...<br></code></pre></td></tr></table></figure> 视图(View)可以用来权限控制：<br />Give access rights not to an entire table, but to a view defined on thistable 赋予和删除访问权限 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">Grant</span> <span class="hljs-operator">&lt;</span>rights<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">on</span> <span class="hljs-operator">&lt;</span>object<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">to</span> <span class="hljs-keyword">user</span><br><span class="hljs-keyword">REVOKE</span> <span class="hljs-operator">&lt;</span>rights<span class="hljs-operator">&gt;</span><br> <span class="hljs-keyword">ON</span> <span class="hljs-operator">&lt;</span>object<span class="hljs-operator">&gt;</span><br> <span class="hljs-keyword">FROM</span> <span class="hljs-operator">&lt;</span><span class="hljs-keyword">user</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure></p><h2 id="er图和uml类图">ER图和UML类图</h2><p>在ER图中，关系两边的数字代表每个实体参与这个关系的最小值和最大值，如：<br />emplpyee 1,1———-菱形works for————–0,ndepartment<br />代表每个雇员必须至少参与这个关系一次，最多也参与一次<br />而0,n代表每个部门最少雇佣0名员工，最多雇佣n名员工<br />通过主键和外键的来确定某几个实体之间的联系<br />注意：如果要使用</p><h2 id="规范化normalization">规范化(Normalization)</h2><h3 id="函数依赖functional-dependency">函数依赖(Functionaldependency)</h3><p>一组属性 B 函数依赖于另一组属性 A，当且仅当：在任意合法的数据记录中，每一组 A 的值，唯一对应一组 B 的值。 即知道A，就能唯一确定 B。 这时，我们叫做 B依赖A<br />X → Y 的意思是： Y 依赖于 X，也可以说：X 决定 Y<br />Armstrong’s Axioms：</p><h3 id="部分依赖第二范式2nf">部分依赖（第二范式2NF）</h3><p>如果一个非主属性依赖于主键的一部分（而不是整个复合主键），那么这种依赖叫做部分依赖。 例如在选课成绩表中，主键是学号+课程<br />而表中拥有学生姓名这一属性，学生姓名只依赖于学号而不依赖于课程<br />这就是部份依赖<br />在第二范式中，只要求所有非主属性没有依赖主键的一部分，即满足2NF ###传递依赖（第三范式3NF） 非主属性依赖另一个非主属性（再依赖主键）例如在关系R(学生id，学院，院长)中<br />我们设置学生id为主键，学院依赖学生id FD: 学生id-&gt;学院<br />院长依赖学院：FD:学院-&gt;院长<br />构成了传递依赖关系，因此不符合3NF</p><h3 id="第一范式">第一范式</h3><p>每个字段都是原子值,例如：<br />001 张三 138xxxx8888,139xxxx7777<br />电话号码”这一列包含了多个值，违反原子性。</p><h3 id="如何决定候选键">如何决定候选键</h3><p>候选键（CandidateKey）是指能够唯一标识关系中每一个元组的属性集合，并且该集合是最小的<br />我们通过计算某些属性的<strong>属性闭包（AttributeClosure）</strong>来看它是否能唯一决定所有属性。</p><p>主键只有一个（主键 =选定的候选键），主属性可以有多个（属于任意候选键的属性），范式的判断主要依赖于 “主键” 和 “非主属性”的关系，但“主属性”的角色也很重要，尤其是在 第三范式（3NF） 中。第二范式：所有非主属性必须完全依赖于主键第三范式：不仅要看主键、非主属性，还要判断右边属性是不是主属性候选键：能唯一标识一行、且最小的属性集合<br />主属性（prime attribute）：出现在任何一个候选键中的属性<br />非主属性（non-prime attribute）：不出现在任何候选键中的属性</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>YAGO论文学习</title>
    <link href="/2025/03/06/YAGO%E8%AE%BA%E6%96%87%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/03/06/YAGO%E8%AE%BA%E6%96%87%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2><p>Knowledge Base(KnwoledgeGraph)是一个有向标签多重图（两个节点之间允许有多条边）</p><p>相比与WikiData，YAGO 4 KB结合了WiKiData的instance和Schema.org的分类</p><p>方便进行推理(Resoning)</p><p>WiKidata采用Class,有很多用户自己定义的复杂类类别。<br />YAGO采用多个属性(Properity)的组合，方便推理，但是如果有些非常规类别名，则很难搜索。</p><p>在这篇论文中，作者尝试结合WiKidata和YAGO的优点，即YAGO采用Schema.org,拥有比较清晰的上层分类(Uppertaxonomy)结构，而Wikidata的下层分类(lower taxonomy)更具细节.</p><h2 id="designing-yago">Designing YAGO</h2><ol type="1"><li>prefer properties over class membership</li><li>Choose the property with fewer objects.</li><li>The upper taxonomy exists to define formal properties that will bepopulated</li><li>The lower taxonomy exists to convey human-intelligible informationabout its instances in a non-redundant form.</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Network Program学习笔记</title>
    <link href="/2025/03/03/Network-Program%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/03/03/Network-Program%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="network-programing-学习笔记">Network Programing 学习笔记</h1><h2 id="考试形式">考试形式</h2><p>实验+考试，考试主要是理论</p><h2 id="什么是socket">什么是socket</h2><p>An entry point for an application process to send and receivedata<br />也就是说是程序与网络之间的接口<br />进程通过TCP或者UDP socket与TCP，UDP端口连接并使用网络协议</p><h2id="socket函数基础的tcp和udp协议">socket函数（基础的TCP和UDP协议）</h2><h3 id="tcp协议">TCP协议</h3><ol type="1"><li><code>socket_fd = SOCKET(AF_INET, SOCK_STREAM, 0);</code>创建一个socket</li><li><code>bind(socket_fd, &amp;address, sizeof(address))</code>绑定一个本地地址给socket（绑定端口）,也就是把address绑定给socket_fd,0成功，-1失败</li><li><code>listen(socket_fd, 5)</code>监听，监听这个socket，服务端需要用</li><li><code>client_fd = accept(socket_fd, address, sizeof(address))</code>服务端函数，为每个连接返回一个新的socket，一般是client_fd。</li><li><code>send(client_fd, buf, len 0); read(client_fd, buf, len 0)</code>用send和read发送或者读取从socket传来的信息。</li><li>客户端不用bind和listen，直接socket创建socket后使用<code>connect(client_fd, &amp;address,sizeof(address))</code>，不用bind是因为connect会自动为socket分配一个端口在TCP协议中，服务端的socket是处于被动监听状态的（passive）,当我们调用listen函数，会把服务端变为被动状态，监听是否有socket新连接，而accpet则是从被监听的socket中取出一个已经完成握手的连接，也就是client_socket,用于客户端数据收发。### UDP协议</li><li>服务端：<code>socket_fd = socket(AF_INET, SOCKET_STREAM, 0)</code>返回一个socket</li><li>服务端：不用listen，但要bind，因为要绑定给一个端口</li><li>客户端：udp的客户端和tcp不一样，因为没有<code>connect()</code>的环节，因此需要<code>bind()</code></li><li>发送和接收<code>sendto(socket_fd, buf, len, 0, &amp;address, (socketlen_t*)siezof(address))</code><code>recvfrom(socket_fd, recv_buf, len, 0 (struct socketaddr*)&amp;address, sizeof(address))</code></li></ol><h2id="tcp协议的socket的函数调用流程">TCP协议的Socket的函数调用流程</h2><p><img src="/pic/1.png" alt="img" /><br />函数展示, 服务端 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netinet/in.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> server_fd, client_fd;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">address</span>;</span><br>    <span class="hljs-type">int</span> addrlen = <span class="hljs-keyword">sizeof</span>(address);<br><br>    <span class="hljs-comment">// 1. 创建套接字</span><br>    server_fd = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (server_fd == <span class="hljs-number">-1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;socket failed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">// 2. 绑定端口</span><br>    address.sin_family = AF_INET;<br>    address.sin_addr.s_addr = INADDR_ANY;<br>    address.sin_port = htons(<span class="hljs-number">8080</span>);<br>    <span class="hljs-keyword">if</span> (bind(server_fd, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;address, <span class="hljs-keyword">sizeof</span>(address)) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;bind failed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">// 3. 监听连接</span><br>    <span class="hljs-keyword">if</span> (listen(server_fd, <span class="hljs-number">5</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;listen failed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Server listening on port 8080...\n&quot;</span>);<br><br>    <span class="hljs-comment">// 4. 接受连接并处理</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        client_fd = accept(server_fd, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;address, (<span class="hljs-type">socklen_t</span>*)&amp;addrlen);<br>        <span class="hljs-keyword">if</span> (client_fd &lt; <span class="hljs-number">0</span>) &#123;<br>            perror(<span class="hljs-string">&quot;accept failed&quot;</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 5. 数据通信</span><br>        <span class="hljs-type">char</span> buffer[<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>        read(client_fd, buffer, <span class="hljs-keyword">sizeof</span>(buffer));<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Client: %s\n&quot;</span>, buffer);<br><br>        <span class="hljs-type">char</span> *response = <span class="hljs-string">&quot;Message received!&quot;</span>;<br>        send(client_fd, response, <span class="hljs-built_in">strlen</span>(response), <span class="hljs-number">0</span>);<br><br>        close(client_fd);<br>    &#125;<br><br>    close(server_fd);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure> 客户端<br /><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netinet/in.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> client_fd;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">server_addr</span>;</span><br><br>    <span class="hljs-comment">// 1. 创建套接字</span><br>    client_fd = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (client_fd == <span class="hljs-number">-1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;socket failed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">// 2. 连接服务器</span><br>    server_addr.sin_family = AF_INET;<br>    server_addr.sin_port = htons(<span class="hljs-number">8080</span>);<br>    inet_pton(AF_INET, <span class="hljs-string">&quot;127.0.0.1&quot;</span>, &amp;server_addr.sin_addr);<br><br>    <span class="hljs-keyword">if</span> (connect(client_fd, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;server_addr, <span class="hljs-keyword">sizeof</span>(server_addr)) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;connect failed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">// 3. 发送和接收数据</span><br>    <span class="hljs-type">char</span> *message = <span class="hljs-string">&quot;Hello, Server!&quot;</span>;<br>    send(client_fd, message, <span class="hljs-built_in">strlen</span>(message), <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Message sent: %s\n&quot;</span>, message);<br><br>    <span class="hljs-type">char</span> buffer[<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    read(client_fd, buffer, <span class="hljs-keyword">sizeof</span>(buffer));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Server response: %s\n&quot;</span>, buffer);<br><br>    close(client_fd);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>```  <br><br>## UDP协议的socket函数创建流程<br>![img](/pic/UDP-structure.png)  <br>相比与TCP协议，在服务端中UDP省去了accept(), 客户端中省去了Connect()这两个建立连接的过程。是一个无连接协议<br>```C<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netinet/in.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> sockfd;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">server_addr</span>, <span class="hljs-title">client_addr</span>;</span><br>    <span class="hljs-type">socklen_t</span> client_len = <span class="hljs-keyword">sizeof</span>(client_addr);<br>    <span class="hljs-type">char</span> buffer[<span class="hljs-number">1024</span>];<br><br>    <span class="hljs-comment">// 1. 创建UDP套接字</span><br>    sockfd = socket(AF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (sockfd == <span class="hljs-number">-1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;socket creation failed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">// 2. 绑定地址和端口</span><br>    server_addr.sin_family = AF_INET;<br>    server_addr.sin_addr.s_addr = INADDR_ANY;<br>    server_addr.sin_port = htons(<span class="hljs-number">8080</span>);<br>    <span class="hljs-keyword">if</span> (bind(sockfd, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;server_addr, <span class="hljs-keyword">sizeof</span>(server_addr)) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;bind failed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;UDP Server listening on port 8080...\n&quot;</span>);<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 3. 接收数据（需保存客户端地址）</span><br>        <span class="hljs-type">ssize_t</span> bytes_received = recvfrom(sockfd, buffer, <span class="hljs-keyword">sizeof</span>(buffer), <span class="hljs-number">0</span>, <br>                                        (<span class="hljs-keyword">struct</span> sockaddr*)&amp;client_addr, &amp;client_len);<br>        <span class="hljs-keyword">if</span> (bytes_received &lt; <span class="hljs-number">0</span>) &#123;<br>            perror(<span class="hljs-string">&quot;recvfrom failed&quot;</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        buffer[bytes_received] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Received from client: %s\n&quot;</span>, buffer);<br><br>        <span class="hljs-comment">// 4. 发送响应</span><br>        <span class="hljs-type">char</span> *response = <span class="hljs-string">&quot;Hello from UDP server&quot;</span>;<br>        sendto(sockfd, response, <span class="hljs-built_in">strlen</span>(response), <span class="hljs-number">0</span>, <br>             (<span class="hljs-keyword">struct</span> sockaddr*)&amp;client_addr, client_len);<br>    &#125;<br><br>    close(sockfd);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure> 客户端： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netinet/in.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> sockfd;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">server_addr</span>;</span><br>    <span class="hljs-type">char</span> buffer[<span class="hljs-number">1024</span>];<br><br>    <span class="hljs-comment">// 1. 创建UDP套接字</span><br>    sockfd = socket(AF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (sockfd == <span class="hljs-number">-1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;socket creation failed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">// 2. 设置服务器地址</span><br>    server_addr.sin_family = AF_INET;<br>    server_addr.sin_port = htons(<span class="hljs-number">8080</span>);<br>    server_addr.sin_addr.s_addr = inet_addr(SERVER_ADDR);<br><br>    <span class="hljs-comment">// 3. 发送数据（无需连接）</span><br>    <span class="hljs-type">char</span> *message = <span class="hljs-string">&quot;Hello from UDP client&quot;</span>;<br>    sendto(sockfd, message, <span class="hljs-built_in">strlen</span>(message), <span class="hljs-number">0</span>, <br>         (<span class="hljs-keyword">struct</span> sockaddr*)&amp;server_addr, <span class="hljs-keyword">sizeof</span>(server_addr));<br><br>    <span class="hljs-comment">// 4. 接收响应</span><br>    <span class="hljs-type">ssize_t</span> bytes_received = recvfrom(sockfd, buffer, <span class="hljs-keyword">sizeof</span>(buffer), <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (bytes_received &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;recvfrom failed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br>    buffer[bytes_received] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Server response: %s\n&quot;</span>, buffer);<br><br>    close(sockfd);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>```  <br><br>## 查询语句<br><span class="hljs-number">1.</span>查询服务<br>```C<br><span class="hljs-keyword">struct</span> servent* <span class="hljs-title function_">getservbyname</span><span class="hljs-params">( <span class="hljs-type">const</span> <span class="hljs-type">char</span> *name,  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *proto )</span><br><span class="hljs-keyword">struct</span> servent *<span class="hljs-title function_">getservbyport</span><span class="hljs-params">( intport,  constchar *proto )</span><br><span class="hljs-comment">//返回指向对应servent结构体的指针</span><br></code></pre></td></tr></table></figure> 2.查询协议 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">protoent</span>&#123;</span> <br>    <span class="hljs-type">char</span> *p_name; <span class="hljs-comment">/* official protocolname*/</span> <br>    <span class="hljs-type">char</span> **p_aliases; <span class="hljs-comment">/* alias list*/</span> <br>    intp_proto; <span class="hljs-comment">/* protocolnumber*/</span> <br>&#125; <br><span class="hljs-keyword">struct</span> protoent *<span class="hljs-title function_">getprotobyname</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span>;<br><span class="hljs-keyword">struct</span> protoent *<span class="hljs-title function_">getprotobynumber</span><span class="hljs-params">(<span class="hljs-type">int</span> proto)</span>;<span class="hljs-comment">//通过协议号查询</span><br></code></pre></td></tr></table></figure> 3.查询主机<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hostent</span>&#123;</span> <br>    <span class="hljs-type">char</span> *h_name; <span class="hljs-comment">/* official name of host */</span> <br>    <span class="hljs-type">char</span> **h_aliases; <span class="hljs-comment">/* alias list */</span> <br>    inth_addrtype; <span class="hljs-comment">/* host address type */</span> <br>    inth_length; <span class="hljs-comment">/* length of address */</span> <br>    <span class="hljs-type">char</span> **h_addr_list; <span class="hljs-comment">/* list of addresses */</span> <br>&#125;<br><span class="hljs-keyword">struct</span> hostent *<span class="hljs-title function_">gethostbyname</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span>;<br><span class="hljs-keyword">struct</span> hostent*<span class="hljs-title function_">gethostbyaddr</span><span class="hljs-params">(constvoid*addr,socklen_tlen, <span class="hljs-type">int</span> type)</span>;<br>```  <br><br>## 广播（Broadcast）和组播(Multicast)  <br><br>广播<br>强制所有设备接收，无论是否需要。分为limited broadcast address <span class="hljs-number">255.255</span>.<span class="hljs-number">255.255</span>和子网广播例如<span class="hljs-number">192.168</span>.<span class="hljs-number">1.255</span>  <br>缺点：可能引发“广播风暴”，浪费带宽和计算资源。<br>```C<br><span class="hljs-comment">//启动广播权限</span><br><span class="hljs-type">int</span> broadcastPermission = <span class="hljs-number">1</span>;<br>setsockopt(sock, SOL_SOCKET, SO_BROADCAST, &amp;broadcastPermission, <span class="hljs-keyword">sizeof</span>(broadcastPermission));<br><span class="hljs-comment">//发送广播数据</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">broadcastAddr</span>;</span><br>broadcastAddr.sin_family = AF_INET;<br>broadcastAddr.sin_addr.s_addr = inet_addr(<span class="hljs-string">&quot;255.255.255.255&quot;</span>);<br>broadcastAddr.sin_port = htons(<span class="hljs-number">12345</span>); <span class="hljs-comment">//端口号按题目要求写</span><br>sendto(sock, data, len, <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;broadcastAddr, <span class="hljs-keyword">sizeof</span>(broadcastAddr));<br></code></pre></td></tr></table></figure></p><p>组播(multicast) 仅发送给主动加入组播组的设备。使用D类地址优点：高效节省带宽，适合大规模分发（如流媒体）组播对于客户端有一个IP_ADD_MEMBERSHIP过程，即加入组的过程组播代码示例<br /><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//服务端，主要涉及选择组播地址</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MCAST_ADDR <span class="hljs-string">&quot;255.55.55.55&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MCAST_PORT 9999</span><br><br><span class="hljs-type">int</span> socket_fd = socket(AF_INET, SOCKET_DGRAM, <span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">mcast_addr</span>;</span><br>mcastaddr.sin_addr.s_addr = inet_addr(MCAST_ADDR);<br>mcastaddr.sin_family  = AF_INET;<br>mcastaddr.port = htons(MCAST_PORT);<br>Char* buf = <span class="hljs-string">&quot;Hello from multicast&quot;</span>;<br>bind(socket_fd, &amp;mcastaddr, <span class="hljs-keyword">sizeof</span>(mcastaddr));<br>sendto(scoket_fd, buf, <span class="hljs-keyword">sizeof</span>(buf), <span class="hljs-number">0</span>, &amp;mcastaddr, <span class="hljs-keyword">sizeof</span>(mcastaddr));<br><span class="hljs-comment">//客户端，主要涉及一个加入组的过程</span><br>socket_fd = socket(AF_INET, SOCKET_DGRAM, <span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">addr</span>;</span><br>addr.sin_family = ;<br>addr.sin_addr.s_addr = ;<br>addr.sin_port = ;<br><br>bind(socket_fd, (sockaddr*)&amp;addr, <span class="hljs-keyword">sizeof</span>(addr));<br><br><span class="hljs-comment">//加入多播组</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ip_mreq</span> <span class="hljs-title">mreq</span>;</span><br>mreq.imr_multiaddr.s_addr = inet_addr(MCAST_ADDR);<br>mreq.imr_interface.s_addr = htonl(INADDR_ANY);<br>setsockopt(socket_fd, IPPROTO_IP, IP_ADD_MEMBERSHIO, &amp;mreq, <span class="hljs-keyword">sizeof</span>(mreq));<br><br><span class="hljs-comment">//随后可以调用recvfrom了</span><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">src</span>;</span><br>    recvfrom(socket, buf, BUFFER_SIZE, (sockaddr *)&amp;src, <span class="hljs-keyword">sizeof</span>(src));<br>&#125;<br></code></pre></td></tr></table></figure>也就是说，广播的启动广播权限和组播的加入组都是使用的<code>setsockopt()</code></p><h2 id="多线程">多线程</h2><p>阻塞式和非阻塞式的socket:<br />在我们的socket中，bind，accept，listen，recv，send，recvfrom，sendto都是阻塞式的，也就是说，在得到一个返回前会一直阻塞<br />可以通过fcntl()来将其设为非阻塞态，这时，这些函数会直接返回，如果有值就返回值，每值就返回一个错误标识<code>fcntl(socket, F_SETFL, O_NONBLOCK)</code></p><h3 id="线程的创建">线程的创建</h3><p>在c语言中，线程的创建使用的是pthread库。<br /><code>int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg)</code>线程的停止：<code>pthread_exit()</code><br />线程的同步：用join，同时也会terminate线程。<code>pthread_join(pthread_t thread, void **retval);</code>分离线程：<code>pthread_detach(pthread_t thread);</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//线程创建实例</span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">func</span><span class="hljs-params">(<span class="hljs-type">void</span> *args)</span>&#123;<br>    <span class="hljs-comment">//线程函数</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s hello!\n&quot;</span>, args);<br>    pthread_exit((<span class="hljs-type">void</span>*)<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">//创建线程</span><br><span class="hljs-type">pthread_t</span> tid;<br>pthread_create(&amp;tid, <span class="hljs-literal">NULL</span>, func, <span class="hljs-string">&quot;You&quot;</span>);<br>pthread_detach(tid);<br></code></pre></td></tr></table></figure><p>TCP协议中服务端多线程使用案例 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//服务端收到新连接之后创建线程</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> socket;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">clientaddr</span>;</span><br>&#125;<span class="hljs-type">client_t</span>;<br><br><span class="hljs-type">int</span> server_fd, client_fd;<br><span class="hljs-type">pthread_t</span> tid;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">server_addr</span>,<span class="hljs-title">client_addr</span>;</span><br>server_fd = socket(AF_INET, SOCKET_STREAM, <span class="hljs-number">0</span>);<br>server_addr.sin_family = AF_INET;<br>server_addr.sin_addr.s_addr = inet_addr(SERVER_IP);<br>server_addr.sin_port = htons(SERVER_PORT);<br><br><span class="hljs-comment">//绑定嵌套字</span><br>bind(server_fd, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;server_addr, <span class="hljs-keyword">sizeof</span>(server_addr));<br><br>listen(server_fd, MAX_CLIENT);<br><br><span class="hljs-comment">//当有新连接时，创建一个进程用于处理</span><br>client_fd = accept(server_fd, (<span class="hljs-keyword">struct</span> *sockaddr)&amp;client_addr,<span class="hljs-keyword">sizeof</span>(client_addr));<br><br><br><span class="hljs-comment">//可以创建一个client的结构体，存一下client的socket和addr传入handle_client函数</span><br><br><br>pthread_create(&amp;tid, <span class="hljs-literal">NULL</span>, handle_client, args);<br><br><span class="hljs-type">void</span> *<span class="hljs-title function_">handle_client</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span>&#123;<br>    <span class="hljs-comment">//对客户端的操作，例如接收发送消息等。</span><br>    <span class="hljs-comment">//注意，我们创建了线程用于管理连接的客户端，但仍然在服务端中，我们操作的是服务端线程的操作。</span><br>    <span class="hljs-type">client_t</span> client = (<span class="hljs-type">client_t</span> *)arg;<br>    <span class="hljs-type">char</span> buf[MAX_BUFFER];<br>    <span class="hljs-type">int</span> byte_receved = recv(client-&gt;socket, buf, <span class="hljs-keyword">sizeof</span>(buf), <span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//发送消息</span><br>    send(client-&gt;socket, buf, <span class="hljs-keyword">sizeof</span>(buf), <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="多路复用multiplexing">多路复用（Multiplexing）</h2><p>在多路复用中，主要是使用select或者poll两个函数完成多路服用的。<br />select函数：<br /><code>int activaty = select(int nfs, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);</code><br />nfds: 需要监视的文件描述符的范围。通常是最大文件描述符的值加 1（即 nfds= max(fd_set) + 1）。<br />readfds: 需要监视是否可以读取的文件描述符集合。<br />writefds: 需要监视是否可以写入的文件描述符集合。<br />timeout: 等待事件发生的最长时间。如果设置为NULL，则表示无限等待；如果设置为0，则是非阻塞模式；如果设置为具体的时间结构，则表示等待指定时间。<br />select 会阻塞直到以下条件之一发生：<br />有文件描述符可以进行读取、写入或发生异常；<br />超过指定的时间限制。<br />返回值：大于0，有文件描述符准备好进行I/O操作，返回值表示准备进行I/O操作的文件描述符数量。等于0，则没有文件描述符准备好，-1错误</p><p>select函数会一直扫描监控的文件描述符数组 poll函数：<code>int poll(struct pollfd *fds, nfds_t nfds, int timeout);</code>struct pollfd *fds:一个指向pollfd结构体数组的指针，每个 pollfd结构体表示一个文件描述符及其对应的事件<br />nfds：需要监视的文件描述符数量<br />timeout：等待事件发生的最长时间。<br />### 几个文件描述符操作函数<code>FD_SET(int fd, fd_set *set);</code>:用于把文件描述符添加进fdset中<code>FD_ISSET(int fd, fd_set *set)</code>:用于检查fd是否准备好进行某种操作<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//多路复用的服务端</span><br><span class="hljs-type">int</span> socket_fd,c1, c2;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">addr</span>,<span class="hljs-title">c1_addr</span>, <span class="hljs-title">c2_addr</span>;</span><br>fd_set read_fd;<br>fd_set read_masterfd;<br>socket_fd = socket(AF_INET, SOCKET_STREAM, <span class="hljs-number">0</span>);<br>addr.sin_family = AF_INET;<br>addr.sin_port = htons(PORT);<br>addr.sin_addr.s_addr = AF<br>bind(socket_fd, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;addr, <span class="hljs-keyword">sizeof</span>(addr));<br><br>FD_ZERO(&amp;read_fd);<br>FD_ZERO(&amp;read_master_fd);<br><br>listen(socket, <span class="hljs-number">2</span>);<br><span class="hljs-comment">//获取俩连接</span><br>c1 = accept(socket_fd, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;c1_addr, <span class="hljs-keyword">sizeof</span>(c1_addr));<br>c2 = accept(socket_fd, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;c2_addr, <span class="hljs-keyword">sizeof</span>(c2_addr));<br><span class="hljs-comment">//将这俩socket加入fd</span><br>FD_SET(c1, &amp;read_masterfd);<br>FD_SET(c2, &amp;read_masterfd);<br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-comment">//不断调用select监控</span><br>    fd_max = c2;<br>    read_fd = read_Masterfd;<br>    <span class="hljs-type">int</span> act = select(fd_max+<span class="hljs-number">1</span>, &amp;read_fd, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, &amp;timeout);<br>    <span class="hljs-keyword">if</span>(act == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Nothing happen&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(act &lt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fd error&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//有行动发生，check c1和c2</span><br>        <span class="hljs-keyword">if</span>(FD_ISSET(c1, &amp;read_fd))&#123;<br>            recv...;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(FD_ISSET(c2, &amp;read_fd))&#123;<br>            recv...;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>用select函数，可以因为有三个监听的文件描述符集合，因此可以处理三个事件。<br />比如，一个服务器要处理从客户端读取客户端发送的</p><h3 id="poll">Poll();</h3><p>首先有一个结构体<br /><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pollfd</span>&#123;</span><br>    <span class="hljs-type">int</span> fd;<span class="hljs-comment">//监视的文件描述符</span><br>    <span class="hljs-type">short</span> events;<br>    <span class="hljs-type">short</span> revents;<br>&#125;<br></code></pre></td></tr></table></figure> 首先填充填充 pollfd 数组：对每个 socket/文件描述符，设置fd 和 events（通常为 POLLIN、POLLOUT 或两者）。<br />调用poll，返回后，遍历pollfd数组，检查每个<code>fds[i].revents</code> 有POLLIN，说明可以读； 有 POLLOUT，说明可以写； 有 POLLERR/POLLHUP等，说明出错或对端关闭。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pollfd</span> <span class="hljs-title">fds</span>[<span class="hljs-title">MAX_COM</span>]</span><br><span class="hljs-class">//初始只有一个监听<span class="hljs-title">socket</span></span><br><span class="hljs-class"><span class="hljs-title">fds</span>[0].<span class="hljs-title">fd</span> =</span> listen_fd;<br>fds.[<span class="hljs-number">0</span>].events = POLLIN;<br><span class="hljs-type">int</span> nfds = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; MAX_COM;i++)&#123;<br>    fds[i].fd = <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-type">int</span> ready = poll(fds, nfds, <span class="hljs-number">-1</span>);<br><br>    <span class="hljs-keyword">if</span>(fds[<span class="hljs-number">0</span>].revents == POLLIN)&#123;<br>        <span class="hljs-type">int</span> conn = accept(listen_fd, <span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>);<br>        fds[empty].fd = conn;<br>        fds[empty].events = POLLIN<br>        <span class="hljs-keyword">if</span>(empty &gt;= nfds) nfds = empty<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>poll和select不一样在于，他把fd的行为放在了一个pollfd数组里，而非分为写fd，读fd和错误fd三个。但同样的，当遇到新连接时要选择一个空的槽插入。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CS106L Learning</title>
    <link href="/2025/02/20/CS106L-Learning/"/>
    <url>/2025/02/20/CS106L-Learning/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><strong>写在前面</strong></h2>说实话，虽然我本科是计算机科班出身，但对C++的认识仍然只停留在cin和cout。<p>这次，由于国外的研究生比较闲，可以借这次机会好好学习一下c++<p><p>Telecomsudparis的课真是大粪，基本都是我本科学过的，而且他课上讲的真的不精，很多东西都是浅尝辄止，很难想象目前的欧洲教育体系下培养出来的学生真的能找到工作吗？</p><h2 id="type-and-structs">Type and Structs</h2><p>相比与C语言，c++多了一个新的结构体操作<code>std::pair&lt;T1, T2&gt;</code><br />接受两个类型的参数<br />应用场景:函数返回多个值，如<code>return &#123;a/b, true&#125;</code></p><p>可以用using来声明一个类型，例如 <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">using</span> QuadraticSolution = std::pair&lt;<span class="hljs-type">bool</span>, std::pair&lt;<span class="hljs-type">double</span>, <span class="hljs-type">double</span>&gt;&gt;;<br>QuadraticSolution‍ <span class="hljs-built_in">solveQuadratic</span>(<span class="hljs-type">double</span> a, <span class="hljs-type">double</span> b, <span class="hljs-type">double</span> c);<br></code></pre></td></tr></table></figure>用auto声明变量，可以自动推导一些变量的类型 ## initialization andReferences</p><p>c++新的 uniform initialization <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> x&#123;<span class="hljs-number">42</span>&#125;;<br>std::string s&#123;<span class="hljs-string">&quot;hello&quot;</span>&#125;;<br><span class="hljs-type">int</span> arrp[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br><span class="hljs-comment">//容器</span><br>std::vector&lt;<span class="hljs-type">int</span>&gt; vec&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
